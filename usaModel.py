# -*- coding: utf-8 -*-
"""Copy of USA_RS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fsabeqo_9z9WBR2YTF_uGjHgdQAgHjY5
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

import torch
from torch import nn
import sklearn
import sklearn.model_selection
import itertools

from google.colab import drive
drive.mount('/content/drive')

df_usa_old = pd.read_csv("/content/drive/MyDrive/Remote Sensing Project/usa_quarterly_data_14-18.csv")

df_usa_old

df_usa_old = df_usa_old.dropna()

df_usa_old

#IF RENAMING IS NEEDED

df_comb = df_comb[['Year', 'LAT', 'LON', 'mean', 'GDP', 'CON']]
df_comb





# FOR THE ABSOLUTE MODEL USING LAT AND LONG
X = df_usa_old[["LAT", "LON", "Mean"]]
y = df_usa_old["GDP"]

X

#NORMALISATION
normalized_x=(X-X.mean())/X.std()
normalized_y = (y-y.mean())/y.std()

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
device

n_features = X.shape[1]

x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(normalized_x, normalized_y, test_size=0.15)

print("Training size = ", x_train.shape)
print("Testing size = ", x_test.shape)

print("Training size = ", y_train.shape)
print("Testing size = ", y_test.shape)

class Network(nn.Module):
  def __init__(self):
    super().__init__()
    self.network = nn.Sequential(
        nn.Linear(n_features, 128),
        nn.ReLU(),
        nn.Linear(128, 256),
        nn.ReLU(),
        nn.Linear(256, 512),
        nn.Dropout(0.2),
        nn.ReLU(),
        nn.Linear(512, 1024),
        nn.Dropout(0.2),
        nn.ReLU(),
        nn.Linear(1024, 1024),
        nn.Dropout(0.2),
        nn.ReLU(),
        nn.Linear(1024, 512),
        nn.ReLU(),
        nn.Linear(512, 256),
        nn.ReLU(),
        nn.Linear(256, 128),
        nn.ReLU(),
        nn.Linear(128, 1)
    )

  def forward(self, xb):
    return self.network(xb)

model = Network()

x_train = np.array(x_train).astype(np.float32)
x_test = np.array(x_test).astype(np.float32)
y_train = np.array(y_train).astype(np.float32).reshape(y_train.shape[0], 1)
y_test = np.array(y_test).astype(np.float32).reshape(y_test.shape[0], 1)

x_train = torch.from_numpy(x_train)
x_test = torch.from_numpy(x_test)
y_train = torch.from_numpy(y_train)
y_test = torch.from_numpy(y_test)

x_train, x_test = x_train.to(device), x_test.to(device)
y_train, y_test = y_train.to(device), y_test.to(device)

model.to(device)

criterion = nn.MSELoss()
opt_func = torch.optim.Adam(model.parameters(), lr=1e-6, weight_decay=1e-3)

# TRAINING CELL
train_losses = []
test_losses = []
epochs = 500000
for e in range(epochs):
  running_loss = 0
  
  #Training pass
  opt_func.zero_grad()
  output = model.forward(x_train)
  loss = criterion(output, y_train)
  loss.backward()
  opt_func.step()

  running_loss += loss.item()

  if e%1000 == 0:
    #print("Loss = ", running_loss)
    train_losses.append(running_loss)
    y_pred = model.forward(x_test)
    test_losses.append(criterion(y_pred, y_test).item())
  if e%25000 == 0:
    print(e/epochs, " Loss = ", running_loss)
    #losses.append(running_loss)

# LOSS GRAPH
fig, ax = plt.subplots()
fig.set_figheight(10)
fig.set_figwidth(20)
ax.plot(train_losses[0:], "r", label="Train Loss")
ax.plot(test_losses[0:], "g", label="Test Loss")
plt.title("Train vs Test Loss")
plt.show()
#plt.savefig("/content/drive/MyDrive/Remote Sensing Project/abs_lat_long_loss.png")

df_usa_new = pd.read_csv("/content/drive/MyDrive/Remote Sensing Project/usa_2019-2020_quarterly_nightlight_and_gdp.csv")

df_usa_new

X_usa_new = df_usa_new[["LAT", "LON", "Mean"]]
normalized_x_usa_new = (X_usa_new-X.mean())/X.std()
x_usa_new = np.array(normalized_x_usa_new).astype(np.float32)
x_usa_new = torch.from_numpy(x_usa_new)
x_usa_new = x_usa_new.to(device)

y_pred_norm_usa_new = model.forward(x_usa_new)

def oneDArray(x):
    return list(itertools.chain(*x))

y_pred_usa_new = oneDArray(y_pred_norm_usa_new.cpu().detach().numpy())
y_pred_usa_new = np.array(y_pred_usa_new)*y.std()+y.mean()
y_usa_new_actual = list(df_usa_new["GDP"])

df_usa_new["GDP_Pred"] = y_pred_usa_new

df_usa_new.to_csv("/content/drive/MyDrive/Remote Sensing Project/usa_new_preds_from_quarts_3_feat.csv")

df_usa_quart = pd.read_csv("/content/drive/MyDrive/Remote Sensing Project/usa_new_preds_from_quarts.csv")

df_usa_19_q1 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q1') & (df_usa_quart['Year'] == 2019)]
df_usa_19_q2 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q2') & (df_usa_quart['Year'] == 2019)]
df_usa_19_q3 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q3') & (df_usa_quart['Year'] == 2019)]
df_usa_19_q4 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q4') & (df_usa_quart['Year'] == 2019)]

df_usa_20_q1 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q1') & (df_usa_quart['Year'] == 2020)]
df_usa_20_q2 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q2') & (df_usa_quart['Year'] == 2020)]
df_usa_20_q3 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q3') & (df_usa_quart['Year'] == 2020)]
df_usa_20_q4 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q4') & (df_usa_quart['Year'] == 2020)]

plt.rcParams.update({'font.size': 14})

pred = np.array(df_usa_19_q1['GDP_Pred'])
actual = np.array(df_usa_19_q1['GDP'])

x_vals = df_usa_19_q1['State']
pred = pd.Series(pred, index=x_vals)
actual = pd.Series(actual, index=x_vals)

df = pd.DataFrame({"Predicted":pred,"Actual":actual})
ax = df.plot.bar(color=["tab:cyan","tab:green"], rot=0, figsize=(24, 6))
ax.set_ylabel("GDP Values (USD Millions)")
plt.setp(ax.get_xticklabels(), rotation=35, horizontalalignment='right')
plt.savefig("usa_19_q1.pdf", bbox_inches = "tight")
plt.show()

pred = np.array(df_usa_19_q2['GDP_Pred'])
actual = np.array(df_usa_19_q2['GDP'])

x_vals = df_usa_19_q2['State']
pred = pd.Series(pred, index=x_vals)
actual = pd.Series(actual, index=x_vals)

df = pd.DataFrame({"Predicted":pred,"Actual":actual})
ax = df.plot.bar(color=["tab:cyan","tab:green"], rot=0, figsize=(25, 6))
ax.set_ylabel("GDP Values (USD Millions)")
plt.setp(ax.get_xticklabels(), rotation=35, horizontalalignment='right')
plt.savefig("usa_19_q2.pdf", bbox_inches = "tight")
plt.show()
#plt.savefig("final_germany_2019.png")

pred = np.array(df_usa_19_q3['GDP_Pred'])
actual = np.array(df_usa_19_q3['GDP'])

x_vals = df_usa_19_q3['State']
pred = pd.Series(pred, index=x_vals)
actual = pd.Series(actual, index=x_vals)


df = pd.DataFrame({"Predicted":pred,"Actual":actual})
ax = df.plot.bar(color=["tab:cyan","tab:green"], rot=0, figsize=(25, 6))
ax.set_ylabel("GDP Values (USD Millions)")
plt.setp(ax.get_xticklabels(), rotation=35, horizontalalignment='right')
plt.savefig("usa_19_q3.pdf", bbox_inches = "tight")
plt.show()

pred = np.array(df_usa_19_q4['GDP_Pred'])
actual = np.array(df_usa_19_q4['GDP'])

x_vals = df_usa_19_q4['State']
pred = pd.Series(pred, index=x_vals)
actual = pd.Series(actual, index=x_vals)

df = pd.DataFrame({"Predicted":pred,"Actual":actual})
ax = df.plot.bar(color=["tab:cyan","tab:green"], rot=0, figsize=(25, 6))
ax.set_ylabel("GDP Values (USD Millions)")
plt.setp(ax.get_xticklabels(), rotation=35, horizontalalignment='right')
plt.savefig("usa_19_q4.pdf", bbox_inches = "tight")
plt.show()

pred = np.array(df_usa_20_q1['GDP_Pred'])
actual = np.array(df_usa_20_q1['GDP'])

x_vals = df_usa_20_q1['State']
pred = pd.Series(pred, index=x_vals)
actual = pd.Series(actual, index=x_vals)

df = pd.DataFrame({"Predicted":pred,"Actual":actual})
ax = df.plot.bar(color=["tab:cyan","tab:green"], rot=0, figsize=(25, 6))
ax.set_ylabel("GDP Values (USD Millions)")
plt.setp(ax.get_xticklabels(), rotation=35, horizontalalignment='right')
plt.savefig("usa_20_q1.pdf", bbox_inches = "tight")
plt.show()

pred = np.array(df_usa_20_q2['GDP_Pred'])
actual = np.array(df_usa_20_q2['GDP'])

x_vals = df_usa_20_q2['State']
pred = pd.Series(pred, index=x_vals)
actual = pd.Series(actual, index=x_vals)

df = pd.DataFrame({"Predicted":pred,"Actual":actual})
ax = df.plot.bar(color=["tab:cyan","tab:green"], rot=0, figsize=(25, 6))
ax.set_ylabel("GDP Values (USD Millions)")
plt.setp(ax.get_xticklabels(), rotation=35, horizontalalignment='right')
plt.savefig("usa_20_q2.pdf", bbox_inches = "tight")
plt.show()

pred = np.array(df_usa_20_q3['GDP_Pred'])
actual = np.array(df_usa_20_q3['GDP'])

x_vals = df_usa_20_q3['State']
pred = pd.Series(pred, index=x_vals)
actual = pd.Series(actual, index=x_vals)

df = pd.DataFrame({"Predicted":pred,"Actual":actual})
ax = df.plot.bar(color=["tab:cyan","tab:green"], rot=0, figsize=(25, 6))
ax.set_ylabel("GDP Values (USD Millions)")
plt.setp(ax.get_xticklabels(), rotation=35, horizontalalignment='right')
plt.savefig("usa_20_q3.pdf", bbox_inches = "tight")
plt.show()

pred = np.array(df_usa_20_q4['GDP_Pred'])
actual = np.array(df_usa_20_q4['GDP'])

x_vals = df_usa_20_q4['State']
pred = pd.Series(pred, index=x_vals)
actual = pd.Series(actual, index=x_vals)

df = pd.DataFrame({"Predicted":pred,"Actual":actual})
ax = df.plot.bar(color=["tab:cyan","tab:green"], rot=0, figsize=(25, 6))
ax.set_ylabel("GDP Values (USD Millions)")
plt.setp(ax.get_xticklabels(), rotation=35, horizontalalignment='right')
plt.savefig("usa_20_q4.pdf", bbox_inches = "tight")
plt.show()

df_usa_19_q1['GDP'].mean()

gdps = []
gdps.append(df_usa_19_q1['GDP'].sum())
gdps.append(df_usa_19_q2['GDP'].sum())
gdps.append(df_usa_19_q3['GDP'].sum())
gdps.append(df_usa_19_q4['GDP'].sum())
gdps.append(df_usa_20_q1['GDP'].sum())
gdps.append(df_usa_20_q2['GDP'].sum())
gdps.append(df_usa_20_q3['GDP'].sum())
gdps.append(df_usa_20_q4['GDP'].sum())

x = ["19 Q1", "19 Q2", "19 Q3", "19 Q4", "20 Q1", "20 Q2", "20 Q3", "20 Q4"]
fig, ax = plt.subplots()
fig.set_figheight(4)
fig.set_figwidth(7)
ax.plot(x, gdps, "black", label="GDP")
ax.set_xlabel('Quarter', labelpad=10)
ax.set_ylabel('GDP (USD Millions)', labelpad=10)
plt.savefig('usa_gdp.pdf', bbox_inches='tight')
plt.show()

pred_gdps = []
pred_gdps.append(df_usa_19_q1['GDP_Pred'].sum())
pred_gdps.append(df_usa_19_q2['GDP_Pred'].sum())
pred_gdps.append(df_usa_19_q3['GDP_Pred'].sum())
pred_gdps.append(df_usa_19_q4['GDP_Pred'].sum())
pred_gdps.append(df_usa_20_q1['GDP_Pred'].sum())
pred_gdps.append(df_usa_20_q2['GDP_Pred'].sum())
pred_gdps.append(df_usa_20_q3['GDP_Pred'].sum())
pred_gdps.append(df_usa_20_q4['GDP_Pred'].sum())

df_usa_quart

df_usa_19_q1['delta'] = abs(df_usa_19_q1['GDP']-df_usa_19_q1['GDP_Pred'])
df_usa_19_q1['div_delta'] = df_usa_19_q1['delta']/df_usa_19_q1['GDP']

df_usa_19_q1

!pip install matplotlib==3.4.2

import matplotlib.pyplot as plt

plt.rcParams.update({'font.size': 17})

labels = list(df_usa_19_q1['State'])
actual1 = list(df_usa_19_q1['GDP'])
pred1 = list(df_usa_19_q1['GDP_Pred'])

x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars

fig, ax = plt.subplots(4, 1, sharex=True, figsize=(24,20))
rects1 = ax[0].bar(x - width/2, actual1, width, label='Actual', color="tab:green")
rects2 = ax[0].bar(x + width/2, pred1, width, label='Predicted', color="tab:cyan")

# Add some text for labels, title and custom x-axis tick labels, etc.
ax[0].set_xticks(x)
ax[0].set_xticklabels(labels)
ax[0].legend()

# ax[0].bar_label(rects1, padding=3)
# ax[0].bar_label(rects2, padding=3)



actual2 = list(df_usa_19_q2['GDP'])
pred2 = list(df_usa_19_q2['GDP_Pred'])
rects3 = ax[1].bar(x - width/2, actual2, width, color="tab:green")
rects4 = ax[1].bar(x + width/2, pred2, width, color="tab:cyan")

actual3 = list(df_usa_19_q3['GDP'])
pred3 = list(df_usa_19_q3['GDP_Pred'])
rects5 = ax[2].bar(x - width/2, actual3, width, color="tab:green")
rects6 = ax[2].bar(x + width/2, pred3, width, color="tab:cyan")

actual4 = list(df_usa_19_q4['GDP'])
pred4 = list(df_usa_19_q4['GDP_Pred'])
rects7 = ax[3].bar(x - width/2, actual4, width, color="tab:green")
rects8 = ax[3].bar(x + width/2, pred4, width, color="tab:cyan")



# Add some text for labels, title and custom x-axis tick labels, etc.
# ax[1].set_ylabel('GDP')
ax[3].set_xticks(x)
ax[3].set_xticklabels(labels, rotation=35, horizontalalignment='right')


# ax[1].bar_label(rects3, padding=3)
# ax[1].bar_label(rects4, padding=3)

ax[0].title.set_text('Quarter 1 2019')
ax[1].title.set_text('Quarter 2 2019')
ax[2].title.set_text('Quarter 3 2019')
ax[3].title.set_text('Quarter 4 2019')

fig.tight_layout()
fig.text(-0.01, 0.5, 'GDP (US Millions)', va='center', rotation='vertical')
#plt.setp(ax[0].get_xticklabels(), rotation=35, horizontalalignment='right')
plt.savefig("usa_19_full.pdf", bbox_inches = "tight")
plt.show()

labels = list(df_usa_20_q1['State'])
actual1 = list(df_usa_20_q1['GDP'])
pred1 = list(df_usa_20_q1['GDP_Pred'])

q1_total = df_usa_20_q1['GDP'].sum()
q2_total = df_usa_20_q2['GDP'].sum()


x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars

fig, ax = plt.subplots(2, 1, sharex=True, figsize=(24,10))
rects1 = ax[0].bar(x - width/2, actual1, width, label='Actual', color="tab:green")
rects2 = ax[0].bar(x + width/2, pred1, width, label='Predicted', color="tab:cyan")

# Add some text for labels, title and custom x-axis tick labels, etc.
ax[0].set_xticks(x)
ax[0].set_xticklabels(labels)
ax[0].legend()

# ax[0].bar_label(rects1, padding=3)
# ax[0].bar_label(rects2, padding=3)



actual2 = list(df_usa_20_q2['GDP'])
pred2 = list(df_usa_20_q2['GDP_Pred'])
rects3 = ax[1].bar(x - width/2, actual2, width, color="tab:green")
rects4 = ax[1].bar(x + width/2, pred2, width, color="tab:cyan")

# actual3 = list(df_usa_20_q3['GDP'])
# pred3 = list(df_usa_20_q3['GDP_Pred'])
# rects5 = ax[2].bar(x - width/2, actual3, width, color="tab:green")
# rects6 = ax[2].bar(x + width/2, pred3, width, color="tab:cyan")

# actual4 = list(df_usa_20_q4['GDP'])
# pred4 = list(df_usa_20_q4['GDP_Pred'])
# rects7 = ax[3].bar(x - width/2, actual4, width, color="tab:green")
# rects8 = ax[3].bar(x + width/2, pred4, width, color="tab:cyan")



# Add some text for labels, title and custom x-axis tick labels, etc.
# ax[1].set_ylabel('GDP')
ax[1].set_xticks(x)
ax[1].set_xticklabels(labels, rotation=40, horizontalalignment='right')


# ax[1].bar_label(rects3, padding=3)
# ax[1].bar_label(rects4, padding=3)

ax[0].title.set_text('Quarter 1 2020 (Total GDP: 1.84x10^7 USD Millions)')
ax[1].title.set_text('Quarter 2 2020 (Total GDP: 1.68x10^7 USD Millions)')
# ax[2].title.set_text('Quarter 3 2020')
# ax[3].title.set_text('Quarter 4 2020')

fig.tight_layout()
fig.text(-0.01, 0.5, 'GDP (US Millions)', va='center', rotation='vertical')
#plt.setp(ax[0].get_xticklabels(), rotation=35, horizontalalignment='right')
plt.savefig("usa_20_half.pdf", bbox_inches = "tight")
plt.show()





df_usa_19_q1.iloc[0]['div_delta']

df_usa_19_q1.iloc[0]['GDP']/df_usa_19_q1['GDP'].sum()

err_19_q1 = 0
gdp_sum = df_usa_19_q1['GDP'].sum()
for i in range(len(df_usa_19_q1)):
  weight = df_usa_19_q1.iloc[i]['GDP']/gdp_sum*10
  err_19_q1 += weight*df_usa_19_q1.iloc[i]['div_delta']

err_19_q1

def get_weighted_error(df):
  err = 0
  gdp_sum = df['GDP'].sum()
  for i in range(len(df)):
    weight = df.iloc[i]['GDP']/gdp_sum*10
    err += weight*df.iloc[i]['div_delta']
  return err

err_19_q1 = get_weighted_error(df_usa_19_q1)
print(err_19_q1)

def prep_df(df):
  df['delta'] = abs(df['GDP'] - df['GDP_Pred'])

df_usa_19_q2['delta'] = abs(df_usa_19_q2['GDP']-df_usa_19_q2['GDP_Pred'])
df_usa_19_q2['div_delta'] = df_usa_19_q2['delta']/df_usa_19_q2['GDP']

df_usa_19_q3['delta'] = abs(df_usa_19_q3['GDP']-df_usa_19_q3['GDP_Pred'])
df_usa_19_q3['div_delta'] = df_usa_19_q3['delta']/df_usa_19_q3['GDP']

df_usa_19_q4['delta'] = abs(df_usa_19_q4['GDP']-df_usa_19_q4['GDP_Pred'])
df_usa_19_q4['div_delta'] = df_usa_19_q4['delta']/df_usa_19_q4['GDP']


df_usa_20_q1['delta'] = abs(df_usa_20_q1['GDP']-df_usa_20_q1['GDP_Pred'])
df_usa_20_q1['div_delta'] = df_usa_20_q1['delta']/df_usa_20_q1['GDP']

df_usa_20_q2['delta'] = abs(df_usa_20_q2['GDP']-df_usa_20_q2['GDP_Pred'])
df_usa_20_q2['div_delta'] = df_usa_20_q2['delta']/df_usa_20_q2['GDP']

df_usa_20_q3['delta'] = abs(df_usa_20_q3['GDP']-df_usa_20_q3['GDP_Pred'])
df_usa_20_q3['div_delta'] = df_usa_20_q3['delta']/df_usa_20_q3['GDP']

df_usa_20_q4['delta'] = abs(df_usa_20_q4['GDP']-df_usa_20_q4['GDP_Pred'])
df_usa_20_q4['div_delta'] = df_usa_20_q4['delta']/df_usa_20_q4['GDP']

err_19_q1 = get_weighted_error(df_usa_19_q1)
err_19_q2 = get_weighted_error(df_usa_19_q2)
err_19_q3 = get_weighted_error(df_usa_19_q3)
err_19_q4 = get_weighted_error(df_usa_19_q4)

err_20_q1 = get_weighted_error(df_usa_20_q1)
err_20_q2 = get_weighted_error(df_usa_20_q2)
err_20_q3 = get_weighted_error(df_usa_20_q3)
err_20_q4 = get_weighted_error(df_usa_20_q4)

print("Error for 19 Q1 = ", err_19_q1)
print("Error for 19 Q2 = ", err_19_q2)
print("Error for 19 Q3 = ", err_19_q3)
print("Error for 19 Q3 = ", err_19_q4)
print("")
print("Error for 20 Q1 = ", err_20_q1)
print("Error for 20 Q2 = ", err_20_q2)
print("Error for 20 Q3 = ", err_20_q3)
print("Error for 20 Q3 = ", err_20_q4)







"""**JUST ONE FEATURE**"""

# FOR THE ABSOLUTE MODEL USING LAT AND LONG
X = df_usa_old[["Mean"]]
y = df_usa_old["GDP"]

#NORMALISATION
normalized_x=(X-X.mean())/X.std()
normalized_y = (y-y.mean())/y.std()

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
device

n_features = X.shape[1]

x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(normalized_x, normalized_y, test_size=0.15)

print("Training size = ", x_train.shape)
print("Testing size = ", x_test.shape)

print("Training size = ", y_train.shape)
print("Testing size = ", y_test.shape)

class Network(nn.Module):
  def __init__(self):
    super().__init__()
    self.network = nn.Sequential(
        nn.Linear(n_features, 128),
        nn.ReLU(),
        nn.Linear(128, 256),
        nn.ReLU(),
        nn.Linear(256, 512),
        nn.Dropout(0.2),
        nn.ReLU(),
        nn.Linear(512, 1024),
        nn.Dropout(0.2),
        nn.ReLU(),
        nn.Linear(1024, 1024),
        nn.Dropout(0.2),
        nn.ReLU(),
        nn.Linear(1024, 512),
        nn.ReLU(),
        nn.Linear(512, 256),
        nn.ReLU(),
        nn.Linear(256, 128),
        nn.ReLU(),
        nn.Linear(128, 1)
    )

  def forward(self, xb):
    return self.network(xb)

model = Network()

x_train = np.array(x_train).astype(np.float32)
x_test = np.array(x_test).astype(np.float32)
y_train = np.array(y_train).astype(np.float32).reshape(y_train.shape[0], 1)
y_test = np.array(y_test).astype(np.float32).reshape(y_test.shape[0], 1)

x_train = torch.from_numpy(x_train)
x_test = torch.from_numpy(x_test)
y_train = torch.from_numpy(y_train)
y_test = torch.from_numpy(y_test)

x_train, x_test = x_train.to(device), x_test.to(device)
y_train, y_test = y_train.to(device), y_test.to(device)

model.to(device)

criterion = nn.MSELoss()
opt_func = torch.optim.Adam(model.parameters(), lr=7e-6, weight_decay=1e-3)

# TRAINING CELL
train_losses = []
test_losses = []
epochs = 700000
for e in range(epochs):
  running_loss = 0
  
  #Training pass
  opt_func.zero_grad()
  output = model.forward(x_train)
  loss = criterion(output, y_train)
  loss.backward()
  opt_func.step()

  running_loss += loss.item()

  if e%1000 == 0:
    #print("Loss = ", running_loss)
    train_losses.append(running_loss)
    y_pred = model.forward(x_test)
    test_losses.append(criterion(y_pred, y_test).item())
  if e%25000 == 0:
    print(e/epochs, " Loss = ", running_loss)
    #losses.append(running_loss)

# LOSS GRAPH
fig, ax = plt.subplots()
fig.set_figheight(10)
fig.set_figwidth(20)
ax.plot(train_losses[0:], "r", label="Train Loss")
ax.plot(test_losses[0:], "g", label="Test Loss")
plt.title("Train vs Test Loss")
plt.show()
#plt.savefig("/content/drive/MyDrive/Remote Sensing Project/abs_lat_long_loss.png")

X_usa_new = df_usa_new[["Mean"]]
normalized_x_usa_new = (X_usa_new-X.mean())/X.std()
x_usa_new = np.array(normalized_x_usa_new).astype(np.float32)
x_usa_new = torch.from_numpy(x_usa_new)
x_usa_new = x_usa_new.to(device)

y_pred_norm_usa_new = model.forward(x_usa_new)

y_pred_usa_new = oneDArray(y_pred_norm_usa_new.cpu().detach().numpy())
y_pred_usa_new = np.array(y_pred_usa_new)*y.std()+y.mean()
y_usa_new_actual = list(df_usa_new["GDP"])

df_usa_new["GDP_Pred"] = y_pred_usa_new

df_usa_new.to_csv("/content/drive/MyDrive/Remote Sensing Project/usa_new_preds_from_quarts_1_feat.csv")

df_usa_quart = pd.read_csv("/content/drive/MyDrive/Remote Sensing Project/usa_new_preds_from_quarts_1_feat.csv")

df_usa_quart

df_usa_19_q1 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q1') & (df_usa_quart['Year'] == 2019)]
df_usa_19_q2 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q2') & (df_usa_quart['Year'] == 2019)]
df_usa_19_q3 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q3') & (df_usa_quart['Year'] == 2019)]
df_usa_19_q4 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q4') & (df_usa_quart['Year'] == 2019)]

df_usa_20_q1 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q1') & (df_usa_quart['Year'] == 2020)]
df_usa_20_q2 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q2') & (df_usa_quart['Year'] == 2020)]
df_usa_20_q3 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q3') & (df_usa_quart['Year'] == 2020)]
df_usa_20_q4 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q4') & (df_usa_quart['Year'] == 2020)]

df_usa_19_q1['delta'] = abs(df_usa_19_q1['GDP']-df_usa_19_q1['GDP_Pred'])
df_usa_19_q1['div_delta'] = df_usa_19_q1['delta']/df_usa_19_q1['GDP']

df_usa_19_q2['delta'] = abs(df_usa_19_q2['GDP']-df_usa_19_q2['GDP_Pred'])
df_usa_19_q2['div_delta'] = df_usa_19_q2['delta']/df_usa_19_q2['GDP']

df_usa_19_q3['delta'] = abs(df_usa_19_q3['GDP']-df_usa_19_q3['GDP_Pred'])
df_usa_19_q3['div_delta'] = df_usa_19_q3['delta']/df_usa_19_q3['GDP']

df_usa_19_q4['delta'] = abs(df_usa_19_q4['GDP']-df_usa_19_q4['GDP_Pred'])
df_usa_19_q4['div_delta'] = df_usa_19_q4['delta']/df_usa_19_q4['GDP']


df_usa_20_q1['delta'] = abs(df_usa_20_q1['GDP']-df_usa_20_q1['GDP_Pred'])
df_usa_20_q1['div_delta'] = df_usa_20_q1['delta']/df_usa_20_q1['GDP']

df_usa_20_q2['delta'] = abs(df_usa_20_q2['GDP']-df_usa_20_q2['GDP_Pred'])
df_usa_20_q2['div_delta'] = df_usa_20_q2['delta']/df_usa_20_q2['GDP']

df_usa_20_q3['delta'] = abs(df_usa_20_q3['GDP']-df_usa_20_q3['GDP_Pred'])
df_usa_20_q3['div_delta'] = df_usa_20_q3['delta']/df_usa_20_q3['GDP']

df_usa_20_q4['delta'] = abs(df_usa_20_q4['GDP']-df_usa_20_q4['GDP_Pred'])
df_usa_20_q4['div_delta'] = df_usa_20_q4['delta']/df_usa_20_q4['GDP']

err_19_q1 = get_weighted_error(df_usa_19_q1)
err_19_q2 = get_weighted_error(df_usa_19_q2)
err_19_q3 = get_weighted_error(df_usa_19_q3)
err_19_q4 = get_weighted_error(df_usa_19_q4)

err_20_q1 = get_weighted_error(df_usa_20_q1)
err_20_q2 = get_weighted_error(df_usa_20_q2)
err_20_q3 = get_weighted_error(df_usa_20_q3)
err_20_q4 = get_weighted_error(df_usa_20_q4)

print("Error for 19 Q1 = ", err_19_q1)
print("Error for 19 Q2 = ", err_19_q2)
print("Error for 19 Q3 = ", err_19_q3)
print("Error for 19 Q4 = ", err_19_q4)
print("")
print("Error for 20 Q1 = ", err_20_q1)
print("Error for 20 Q2 = ", err_20_q2)
print("Error for 20 Q3 = ", err_20_q3)
print("Error for 20 Q4 = ", err_20_q4)



"""**SVM TEST**"""

# FOR THE ABSOLUTE MODEL USING LAT AND LONG
X = df_usa_old[["LAT", "LON", "Mean"]]
y = df_usa_old["GDP"]

from sklearn.preprocessing import StandardScaler

#NORMALISATION
normalized_x=(X-X.mean())/X.std()
normalized_y = (y-y.mean())/y.std()

x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(normalized_x, normalized_y, test_size=0.15)

from sklearn.svm import SVR

regressor = SVR(kernel = 'poly')
regressor.fit(x_train, y_train)

df_usa_new = pd.read_csv("/content/drive/MyDrive/Remote Sensing Project/usa_2019-2020_quarterly_nightlight_and_gdp.csv")

X_usa_new = df_usa_new[["LAT", "LON", "Mean"]]
normalized_x_usa_new = (X_usa_new-X.mean())/X.std()
x_usa_new = np.array(normalized_x_usa_new).astype(np.float32)

gdp_pred = regressor.predict(normalized_x_usa_new)

gdp_pred = list(gdp_pred)
gdp_pred = np.array(gdp_pred)*y.std()+y.mean()
y_usa_new_actual = list(df_usa_new["GDP"])

df_usa_new["GDP_Pred"] = gdp_pred

df_usa_19_q1 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q1') & (df_usa_new['Year'] == 2019)]
df_usa_19_q2 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q2') & (df_usa_new['Year'] == 2019)]
df_usa_19_q3 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q3') & (df_usa_new['Year'] == 2019)]
df_usa_19_q4 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q4') & (df_usa_new['Year'] == 2019)]
df_usa_20_q1 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q1') & (df_usa_new['Year'] == 2020)]
df_usa_20_q2 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q2') & (df_usa_new['Year'] == 2020)]
df_usa_20_q3 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q3') & (df_usa_new['Year'] == 2020)]
df_usa_20_q4 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q4') & (df_usa_new['Year'] == 2020)]

df_usa_19_q1['delta'] = abs(df_usa_19_q1['GDP']-df_usa_19_q1['GDP_Pred'])
df_usa_19_q1['div_delta'] = df_usa_19_q1['delta']/df_usa_19_q1['GDP']

df_usa_19_q2['delta'] = abs(df_usa_19_q2['GDP']-df_usa_19_q2['GDP_Pred'])
df_usa_19_q2['div_delta'] = df_usa_19_q2['delta']/df_usa_19_q2['GDP']

df_usa_19_q3['delta'] = abs(df_usa_19_q3['GDP']-df_usa_19_q3['GDP_Pred'])
df_usa_19_q3['div_delta'] = df_usa_19_q3['delta']/df_usa_19_q3['GDP']

df_usa_19_q4['delta'] = abs(df_usa_19_q4['GDP']-df_usa_19_q4['GDP_Pred'])
df_usa_19_q4['div_delta'] = df_usa_19_q4['delta']/df_usa_19_q4['GDP']


df_usa_20_q1['delta'] = abs(df_usa_20_q1['GDP']-df_usa_20_q1['GDP_Pred'])
df_usa_20_q1['div_delta'] = df_usa_20_q1['delta']/df_usa_20_q1['GDP']

df_usa_20_q2['delta'] = abs(df_usa_20_q2['GDP']-df_usa_20_q2['GDP_Pred'])
df_usa_20_q2['div_delta'] = df_usa_20_q2['delta']/df_usa_20_q2['GDP']

df_usa_20_q3['delta'] = abs(df_usa_20_q3['GDP']-df_usa_20_q3['GDP_Pred'])
df_usa_20_q3['div_delta'] = df_usa_20_q3['delta']/df_usa_20_q3['GDP']

df_usa_20_q4['delta'] = abs(df_usa_20_q4['GDP']-df_usa_20_q4['GDP_Pred'])
df_usa_20_q4['div_delta'] = df_usa_20_q4['delta']/df_usa_20_q4['GDP']

err_19_q1 = get_weighted_error(df_usa_19_q1)
err_19_q2 = get_weighted_error(df_usa_19_q2)
err_19_q3 = get_weighted_error(df_usa_19_q3)
err_19_q4 = get_weighted_error(df_usa_19_q4)

err_20_q1 = get_weighted_error(df_usa_20_q1)
err_20_q2 = get_weighted_error(df_usa_20_q2)
err_20_q3 = get_weighted_error(df_usa_20_q3)
err_20_q4 = get_weighted_error(df_usa_20_q4)

print("Error for 19 Q1 = ", err_19_q1)
print("Error for 19 Q2 = ", err_19_q2)
print("Error for 19 Q3 = ", err_19_q3)
print("Error for 19 Q4 = ", err_19_q4)
print("")
print("Error for 20 Q1 = ", err_20_q1)
print("Error for 20 Q2 = ", err_20_q2)
print("Error for 20 Q3 = ", err_20_q3)
print("Error for 20 Q4 = ", err_20_q4)





!pip install xgboost

import xgboost

model = xgboost.XGBRegressor(n_estimators=30, learning_rate=0.05, random_state=11)

model.fit(normalized_x, normalized_y)

df_usa_new = pd.read_csv("/content/drive/MyDrive/Remote Sensing Project/usa_2019-2020_quarterly_nightlight_and_gdp.csv")

X_usa_new = df_usa_new[["LAT", "LON", "Mean"]]
normalized_x_usa_new = (X_usa_new-X.mean())/X.std()
x_usa_new = np.array(normalized_x_usa_new).astype(np.float32)

gdp_pred = model.predict(normalized_x_usa_new)

gdp_pred = list(gdp_pred)
gdp_pred = np.array(gdp_pred)*y.std()+y.mean()
y_usa_new_actual = list(df_usa_new["GDP"])
df_usa_new["GDP_Pred"] = gdp_pred

df_usa_19_q1 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q1') & (df_usa_new['Year'] == 2019)]
df_usa_19_q2 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q2') & (df_usa_new['Year'] == 2019)]
df_usa_19_q3 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q3') & (df_usa_new['Year'] == 2019)]
df_usa_19_q4 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q4') & (df_usa_new['Year'] == 2019)]
df_usa_20_q1 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q1') & (df_usa_new['Year'] == 2020)]
df_usa_20_q2 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q2') & (df_usa_new['Year'] == 2020)]
df_usa_20_q3 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q3') & (df_usa_new['Year'] == 2020)]
df_usa_20_q4 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q4') & (df_usa_new['Year'] == 2020)]

df_usa_19_q1['delta'] = abs(df_usa_19_q1['GDP']-df_usa_19_q1['GDP_Pred'])
df_usa_19_q1['div_delta'] = df_usa_19_q1['delta']/df_usa_19_q1['GDP']

df_usa_19_q2['delta'] = abs(df_usa_19_q2['GDP']-df_usa_19_q2['GDP_Pred'])
df_usa_19_q2['div_delta'] = df_usa_19_q2['delta']/df_usa_19_q2['GDP']

df_usa_19_q3['delta'] = abs(df_usa_19_q3['GDP']-df_usa_19_q3['GDP_Pred'])
df_usa_19_q3['div_delta'] = df_usa_19_q3['delta']/df_usa_19_q3['GDP']

df_usa_19_q4['delta'] = abs(df_usa_19_q4['GDP']-df_usa_19_q4['GDP_Pred'])
df_usa_19_q4['div_delta'] = df_usa_19_q4['delta']/df_usa_19_q4['GDP']


df_usa_20_q1['delta'] = abs(df_usa_20_q1['GDP']-df_usa_20_q1['GDP_Pred'])
df_usa_20_q1['div_delta'] = df_usa_20_q1['delta']/df_usa_20_q1['GDP']

df_usa_20_q2['delta'] = abs(df_usa_20_q2['GDP']-df_usa_20_q2['GDP_Pred'])
df_usa_20_q2['div_delta'] = df_usa_20_q2['delta']/df_usa_20_q2['GDP']

df_usa_20_q3['delta'] = abs(df_usa_20_q3['GDP']-df_usa_20_q3['GDP_Pred'])
df_usa_20_q3['div_delta'] = df_usa_20_q3['delta']/df_usa_20_q3['GDP']

df_usa_20_q4['delta'] = abs(df_usa_20_q4['GDP']-df_usa_20_q4['GDP_Pred'])
df_usa_20_q4['div_delta'] = df_usa_20_q4['delta']/df_usa_20_q4['GDP']

err_19_q1 = get_weighted_error(df_usa_19_q1)
err_19_q2 = get_weighted_error(df_usa_19_q2)
err_19_q3 = get_weighted_error(df_usa_19_q3)
err_19_q4 = get_weighted_error(df_usa_19_q4)

err_20_q1 = get_weighted_error(df_usa_20_q1)
err_20_q2 = get_weighted_error(df_usa_20_q2)
err_20_q3 = get_weighted_error(df_usa_20_q3)
err_20_q4 = get_weighted_error(df_usa_20_q4)

print("Error for 19 Q1 = ", err_19_q1)
print("Error for 19 Q2 = ", err_19_q2)
print("Error for 19 Q3 = ", err_19_q3)
print("Error for 19 Q4 = ", err_19_q4)
print("")
print("Error for 20 Q1 = ", err_20_q1)
print("Error for 20 Q2 = ", err_20_q2)
print("Error for 20 Q3 = ", err_20_q3)
print("Error for 20 Q4 = ", err_20_q4)





from sklearn.linear_model import LinearRegression

model = LinearRegression()

model.fit(x_train, y_train)

df_usa_new = pd.read_csv("/content/drive/MyDrive/Remote Sensing Project/usa_2019-2020_quarterly_nightlight_and_gdp.csv")

X_usa_new = df_usa_new[["LAT", "LON", "Mean"]]
normalized_x_usa_new = (X_usa_new-X.mean())/X.std()
x_usa_new = np.array(normalized_x_usa_new).astype(np.float32)

gdp_pred = model.predict(normalized_x_usa_new)

gdp_pred = list(gdp_pred)
gdp_pred = np.array(gdp_pred)*y.std()+y.mean()
y_usa_new_actual = list(df_usa_new["GDP"])
df_usa_new["GDP_Pred"] = gdp_pred

df_usa_19_q1 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q1') & (df_usa_new['Year'] == 2019)]
df_usa_19_q2 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q2') & (df_usa_new['Year'] == 2019)]
df_usa_19_q3 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q3') & (df_usa_new['Year'] == 2019)]
df_usa_19_q4 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q4') & (df_usa_new['Year'] == 2019)]
df_usa_20_q1 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q1') & (df_usa_new['Year'] == 2020)]
df_usa_20_q2 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q2') & (df_usa_new['Year'] == 2020)]
df_usa_20_q3 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q3') & (df_usa_new['Year'] == 2020)]
df_usa_20_q4 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q4') & (df_usa_new['Year'] == 2020)]

df_usa_19_q1['delta'] = abs(df_usa_19_q1['GDP']-df_usa_19_q1['GDP_Pred'])
df_usa_19_q1['div_delta'] = df_usa_19_q1['delta']/df_usa_19_q1['GDP']

df_usa_19_q2['delta'] = abs(df_usa_19_q2['GDP']-df_usa_19_q2['GDP_Pred'])
df_usa_19_q2['div_delta'] = df_usa_19_q2['delta']/df_usa_19_q2['GDP']

df_usa_19_q3['delta'] = abs(df_usa_19_q3['GDP']-df_usa_19_q3['GDP_Pred'])
df_usa_19_q3['div_delta'] = df_usa_19_q3['delta']/df_usa_19_q3['GDP']

df_usa_19_q4['delta'] = abs(df_usa_19_q4['GDP']-df_usa_19_q4['GDP_Pred'])
df_usa_19_q4['div_delta'] = df_usa_19_q4['delta']/df_usa_19_q4['GDP']


df_usa_20_q1['delta'] = abs(df_usa_20_q1['GDP']-df_usa_20_q1['GDP_Pred'])
df_usa_20_q1['div_delta'] = df_usa_20_q1['delta']/df_usa_20_q1['GDP']

df_usa_20_q2['delta'] = abs(df_usa_20_q2['GDP']-df_usa_20_q2['GDP_Pred'])
df_usa_20_q2['div_delta'] = df_usa_20_q2['delta']/df_usa_20_q2['GDP']

df_usa_20_q3['delta'] = abs(df_usa_20_q3['GDP']-df_usa_20_q3['GDP_Pred'])
df_usa_20_q3['div_delta'] = df_usa_20_q3['delta']/df_usa_20_q3['GDP']

df_usa_20_q4['delta'] = abs(df_usa_20_q4['GDP']-df_usa_20_q4['GDP_Pred'])
df_usa_20_q4['div_delta'] = df_usa_20_q4['delta']/df_usa_20_q4['GDP']

err_19_q1 = get_weighted_error(df_usa_19_q1)
err_19_q2 = get_weighted_error(df_usa_19_q2)
err_19_q3 = get_weighted_error(df_usa_19_q3)
err_19_q4 = get_weighted_error(df_usa_19_q4)

err_20_q1 = get_weighted_error(df_usa_20_q1)
err_20_q2 = get_weighted_error(df_usa_20_q2)
err_20_q3 = get_weighted_error(df_usa_20_q3)
err_20_q4 = get_weighted_error(df_usa_20_q4)


print("Error for 19 Q1 = ", err_19_q1)
print("Error for 19 Q2 = ", err_19_q2)
print("Error for 19 Q3 = ", err_19_q3)
print("Error for 19 Q4 = ", err_19_q4)
print("")
print("Error for 20 Q1 = ", err_20_q1)
print("Error for 20 Q2 = ", err_20_q2)
print("Error for 20 Q3 = ", err_20_q3)
print("Error for 20 Q4 = ", err_20_q4)





from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree=4)
X_poly = poly_reg.fit_transform(x_train)
pol_reg = LinearRegression()
pol_reg.fit(x_train, y_train)

df_usa_new = pd.read_csv("/content/drive/MyDrive/Remote Sensing Project/usa_2019-2020_quarterly_nightlight_and_gdp.csv")

X_usa_new = df_usa_new[["LAT", "LON", "Mean"]]
normalized_x_usa_new = (X_usa_new-X.mean())/X.std()
x_usa_new = np.array(normalized_x_usa_new).astype(np.float32)

gdp_pred = pol_reg.predict(normalized_x_usa_new)

gdp_pred = list(gdp_pred)
gdp_pred = np.array(gdp_pred)*y.std()+y.mean()
y_usa_new_actual = list(df_usa_new["GDP"])
df_usa_new["GDP_Pred"] = gdp_pred

df_usa_19_q1 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q1') & (df_usa_new['Year'] == 2019)]
df_usa_19_q2 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q2') & (df_usa_new['Year'] == 2019)]
df_usa_19_q3 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q3') & (df_usa_new['Year'] == 2019)]
df_usa_19_q4 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q4') & (df_usa_new['Year'] == 2019)]
df_usa_20_q1 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q1') & (df_usa_new['Year'] == 2020)]
df_usa_20_q2 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q2') & (df_usa_new['Year'] == 2020)]
df_usa_20_q3 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q3') & (df_usa_new['Year'] == 2020)]
df_usa_20_q4 = df_usa_new.loc[(df_usa_new['Quarter'] == 'Q4') & (df_usa_new['Year'] == 2020)]

df_usa_19_q1['delta'] = abs(df_usa_19_q1['GDP']-df_usa_19_q1['GDP_Pred'])
df_usa_19_q1['div_delta'] = df_usa_19_q1['delta']/df_usa_19_q1['GDP']

df_usa_19_q2['delta'] = abs(df_usa_19_q2['GDP']-df_usa_19_q2['GDP_Pred'])
df_usa_19_q2['div_delta'] = df_usa_19_q2['delta']/df_usa_19_q2['GDP']

df_usa_19_q3['delta'] = abs(df_usa_19_q3['GDP']-df_usa_19_q3['GDP_Pred'])
df_usa_19_q3['div_delta'] = df_usa_19_q3['delta']/df_usa_19_q3['GDP']

df_usa_19_q4['delta'] = abs(df_usa_19_q4['GDP']-df_usa_19_q4['GDP_Pred'])
df_usa_19_q4['div_delta'] = df_usa_19_q4['delta']/df_usa_19_q4['GDP']


df_usa_20_q1['delta'] = abs(df_usa_20_q1['GDP']-df_usa_20_q1['GDP_Pred'])
df_usa_20_q1['div_delta'] = df_usa_20_q1['delta']/df_usa_20_q1['GDP']

df_usa_20_q2['delta'] = abs(df_usa_20_q2['GDP']-df_usa_20_q2['GDP_Pred'])
df_usa_20_q2['div_delta'] = df_usa_20_q2['delta']/df_usa_20_q2['GDP']

df_usa_20_q3['delta'] = abs(df_usa_20_q3['GDP']-df_usa_20_q3['GDP_Pred'])
df_usa_20_q3['div_delta'] = df_usa_20_q3['delta']/df_usa_20_q3['GDP']

df_usa_20_q4['delta'] = abs(df_usa_20_q4['GDP']-df_usa_20_q4['GDP_Pred'])
df_usa_20_q4['div_delta'] = df_usa_20_q4['delta']/df_usa_20_q4['GDP']

err_19_q1 = get_weighted_error(df_usa_19_q1)
err_19_q2 = get_weighted_error(df_usa_19_q2)
err_19_q3 = get_weighted_error(df_usa_19_q3)
err_19_q4 = get_weighted_error(df_usa_19_q4)

err_20_q1 = get_weighted_error(df_usa_20_q1)
err_20_q2 = get_weighted_error(df_usa_20_q2)
err_20_q3 = get_weighted_error(df_usa_20_q3)
err_20_q4 = get_weighted_error(df_usa_20_q4)


print("Error for 19 Q1 = ", err_19_q1)
print("Error for 19 Q2 = ", err_19_q2)
print("Error for 19 Q3 = ", err_19_q3)
print("Error for 19 Q4 = ", err_19_q4)
print("")
print("Error for 20 Q1 = ", err_20_q1)
print("Error for 20 Q2 = ", err_20_q2)
print("Error for 20 Q3 = ", err_20_q3)
print("Error for 20 Q4 = ", err_20_q4)











arima = pd.read_csv("/content/drive/MyDrive/Remote Sensing Project/ARIMA_forecasts.csv")
arima.head()

df_usa_quart = pd.read_csv("/content/drive/MyDrive/Remote Sensing Project/usa_new_preds_from_quarts.csv")
df_usa_quart.head()

df_usa_19_q1 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q1') & (df_usa_quart['Year'] == 2019)]
df_usa_19_q2 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q2') & (df_usa_quart['Year'] == 2019)]
df_usa_19_q3 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q3') & (df_usa_quart['Year'] == 2019)]
df_usa_19_q4 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q4') & (df_usa_quart['Year'] == 2019)]
df_usa_20_q1 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q1') & (df_usa_quart['Year'] == 2020)]
df_usa_20_q2 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q2') & (df_usa_quart['Year'] == 2020)]
df_usa_20_q3 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q3') & (df_usa_quart['Year'] == 2020)]
df_usa_20_q4 = df_usa_quart.loc[(df_usa_quart['Quarter'] == 'Q4') & (df_usa_quart['Year'] == 2020)]

usa_labs = pd.read_csv("/content/drive/MyDrive/Remote Sensing Project/US quarterly data-2011.csv")
usa_labs.head()

state_labels = list(usa_labs['Unnamed: 0'][1:])
len(state_labels)

arima['State'] = state_labels
arima.head()

arima_20q1 = arima[["2020Q1", "State"]]
arima_20q1.head()

df_20q1 = pd.merge(df_usa_20_q1, arima_20q1, on=['State'])

df_20q1.head()

df_20q1['delta'] = abs(df_20q1['GDP']-df_20q1['2020Q1'])
df_20q1['div_delta'] = df_20q1['delta']/df_20q1['GDP']

err = 0
gdp_sum = df_20q1['GDP'].sum()
for i in range(len(df_20q1)):
  weight = df_20q1.iloc[i]['GDP']/gdp_sum*10
  err += weight*df_20q1.iloc[i]['div_delta']

print(err)





arima_20q2 = arima[["2020Q2", "State"]]

df_20q2 = pd.merge(df_usa_20_q2, arima_20q2, on=['State'])

df_20q2

df_20q2['delta'] = abs(df_20q2['GDP']-df_20q2['2020Q2'])
df_20q2['div_delta'] = df_20q2['delta']/df_20q2['GDP']

err = 0
gdp_sum = df_20q2['GDP'].sum()
for i in range(len(df_20q2)):
  weight = df_20q2.iloc[i]['GDP']/gdp_sum*10
  err += weight*df_20q2.iloc[i]['div_delta']

print(err)

plt.rcParams.update({'font.size': 17})

labels = list(df_20q1['State'])
actual1 = list(df_20q1['GDP'])
pred1 = list(df_20q1['2020Q1'])
model_pred_1 = list(df_usa_20_q1['GDP_Pred'])


x = np.arange(len(labels))  # the label locations
width = 0.4  # the width of the bars

fig, ax = plt.subplots(2, 1, sharex=True, figsize=(32,18))
rects1 = ax[0].bar(x - 0.25, actual1, width, label='Actual', color="tab:green")
rects2 = ax[0].bar(x, pred1, width, label='ARIMA', color="tab:cyan")
rects5 = ax[0].bar(x + 0.25, model_pred_1, width, label='Nightlight prediction', color="tab:orange")


# Add some text for labels, title and custom x-axis tick labels, etc.
ax[0].set_xticks(x)
ax[0].set_xticklabels(labels)
ax[0].legend()

# ax[0].bar_label(rects1, padding=3)
# ax[0].bar_label(rects2, padding=3)



labels = list(df_20q2['State'])
actual2 = list(df_20q2['GDP'])
pred2 = list(df_20q1['2020Q1'])
model_pred_2 = list(df_usa_20_q2['GDP_Pred'])
rects3 = ax[1].bar(x - 0.25, actual2, width, color="tab:green")
rects4 = ax[1].bar(x, pred2, width, color="tab:cyan")
rects6 = ax[1].bar(x + 0.25, model_pred_2, width, label='Nightlight prediction', color="tab:orange")

# actual3 = list(df_usa_20_q3['GDP'])
# pred3 = list(df_usa_20_q3['GDP_Pred'])
# rects5 = ax[2].bar(x - width/2, actual3, width, color="tab:green")
# rects6 = ax[2].bar(x + width/2, pred3, width, color="tab:cyan")

# actual4 = list(df_usa_20_q4['GDP'])
# pred4 = list(df_usa_20_q4['GDP_Pred'])
# rects7 = ax[3].bar(x - width/2, actual4, width, color="tab:green")
# rects8 = ax[3].bar(x + width/2, pred4, width, color="tab:cyan")



# Add some text for labels, title and custom x-axis tick labels, etc.
# ax[1].set_ylabel('GDP')
ax[1].set_xticks(x)
ax[1].set_xticklabels(labels, rotation=40, horizontalalignment='right')


# ax[1].bar_label(rects3, padding=3)
# ax[1].bar_label(rects4, padding=3)

# ax[0].title.set_text('Quarter 1 2020 (Total GDP: 1.84x10^7 USD Millions)')
# ax[1].title.set_text('Quarter 2 2020 (Total GDP: 1.68x10^7 USD Millions)')
# ax[2].title.set_text('Quarter 3 2020')
# ax[3].title.set_text('Quarter 4 2020')

#GDP: 1.84x10^7 USD Millions

font = {'family': 'serif',
        'color':  'black',
        'weight': 'normal',
        'size': 16,
        }

fig.tight_layout()
fig.text(-0.025, 0.5, 'GDP (US Millions)', va='center', rotation='vertical')
fig.text(-0.008, 0.35, '2019 GDP: 1.84x10^7 USD Millions', va='center', rotation='vertical', fontdict=font)
fig.text(-0.008, 0.75, '2020 GDP: 1.84x10^7 USD Millions', va='center', rotation='vertical', fontdict=font)
fig.text(0.5, 0, 'States', va='center', rotation='horizontal')
#plt.setp(ax[0].get_xticklabels(), rotation=35, horizontalalignment='right')
plt.savefig("arima_vs_pred.pdf", bbox_inches = "tight")
plt.show()

labels = list(df_20q1['State'])
actual1 = list(df_20q1['GDP'])
pred1 = list(df_20q1['2020Q1'])
model_pred_1 = list(df_usa_20_q1['GDP_Pred'])


x = np.arange(len(labels))  # the label locations
width = 0.4  # the width of the bars

fig, ax = plt.subplots(2, 1, sharex=True, figsize=(24,10))
rects1 = ax[0].bar(x - 0.25, actual1, width, label='Actual', color="tab:green")
rects2 = ax[0].bar(x, pred1, width, label='ARIMA', color="tab:cyan")
rects5 = ax[0].bar(x + 0.25, model_pred_1, width, label='Our Model', color="tab:orange")


# Add some text for labels, title and custom x-axis tick labels, etc.
ax[0].set_xticks(x)
ax[0].set_xticklabels(labels)
ax[0].legend(rotation=90)

# ax[0].bar_label(rects1, padding=3)
# ax[0].bar_label(rects2, padding=3)



labels = list(df_20q2['State'])
actual2 = list(df_20q2['GDP'])
pred2 = list(df_20q1['2020Q1'])
model_pred_2 = list(df_usa_20_q2['GDP_Pred'])
rects3 = ax[1].bar(x - 0.25, actual2, width, color="tab:green")
rects4 = ax[1].bar(x, pred2, width, color="tab:cyan")
rects6 = ax[1].bar(x + 0.25, model_pred_2, width, label='Our Model', color="tab:orange")

# actual3 = list(df_usa_20_q3['GDP'])
# pred3 = list(df_usa_20_q3['GDP_Pred'])
# rects5 = ax[2].bar(x - width/2, actual3, width, color="tab:green")
# rects6 = ax[2].bar(x + width/2, pred3, width, color="tab:cyan")

# actual4 = list(df_usa_20_q4['GDP'])
# pred4 = list(df_usa_20_q4['GDP_Pred'])
# rects7 = ax[3].bar(x - width/2, actual4, width, color="tab:green")
# rects8 = ax[3].bar(x + width/2, pred4, width, color="tab:cyan")



# Add some text for labels, title and custom x-axis tick labels, etc.
# ax[1].set_ylabel('GDP')
ax[1].set_xticks(x)
ax[1].set_xticklabels(labels, rotation=40, horizontalalignment='right')


# ax[1].bar_label(rects3, padding=3)
# ax[1].bar_label(rects4, padding=3)

ax[0].title.set_text('Quarter 1 2020 (Total GDP: 1.84x10^7 USD Millions)')
ax[1].title.set_text('Quarter 2 2020 (Total GDP: 1.68x10^7 USD Millions)')
# ax[2].title.set_text('Quarter 3 2020')
# ax[3].title.set_text('Quarter 4 2020')

fig.tight_layout()
fig.text(-0.01, 0.5, 'GDP (US Millions)', va='center', rotation='vertical')
#plt.setp(ax[0].get_xticklabels(), rotation=35, horizontalalignment='right')
#plt.savefig("arima_vs_pred.pdf", bbox_inches = "tight")
plt.show()

fig, ax = plt.subplots(figsize=(6, 10))

labels = list(df_20q1['State'])
actual1 = list(df_20q1['GDP'])
pred1 = list(df_20q1['2020Q1'])
model_pred_1 = list(df_usa_20_q1['GDP_Pred'])

bar_size = 0.25
padding = 0.25

y_locs = np.arange(len(actual1)) * (bar_size * 3 + padding)

rects1 = ax.barh(y_locs, actual1, align='edge', height=bar_size, color='r', label="total tweet count")
rects2 = ax.barh(y_locs + bar_size, pred1, align='edge', height=bar_size, color='b', label="positive tweet count")
rects3 = ax.barh(y_locs + 2 * bar_size, model_pred_1, align='edge', height=bar_size, color='yellow', label="neutral tweet count")
ax.set(yticks=x_locs, yticklabels=t_label_lst, ylim=[0 - padding, len(x_locs)])
#ax.set_xticklabels(labels, rotation=40, horizontalalignment='right')

